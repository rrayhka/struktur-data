# -*- coding: utf-8 -*-
"""220411100158_Modul8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tCq95nptdZPNpA-J3UfIuumgB29JYRCp
"""

class Node:
    def __init__(self, data):
        self.left = None
        self.right = None
        self.data = data

    def insert(self, data):
        if self.data:
            if data < self.data:
                if self.left is None:
                    self.left = Node(data)
                else:
                    self.left.insert(data)
            elif data > self.data:
                if self.right is None:
                    self.right = Node(data)
                else:
                    self.right.insert(data)

    def PrintTree(self):
        if self.left:
            self.left.PrintTree()
        print(self.data)
        if self.right:
            self.right.PrintTree()

root = Node('a')
root.left = Node('b')
root.left.left = Node('d')
root.right = Node('c')
root.right.left = Node('e')
root.right.right = Node('f')
root.PrintTree()

class Node:
    def __init__(self, data):
        self.left = None
        self.right = None
        self.data = data


    def buildTree(a):
        stack = []
        tokens = a.split()
        operators = set(['+', '-', '*', '/'])
        for token in tokens:
            if token not in operators:
                tree = Node(token)
                stack.append(tree)
            else:
                right_tree = stack.pop()
                left_tree = stack.pop()
                operator_tree = Node(token)
                operator_tree.left = left_tree
                operator_tree.right = right_tree
                stack.append(operator_tree)
        return stack[0]


    def evaluate(node):
        if node is None:
            return 0
        if node.left is None and node.right is None:
            return int(node.data)
        left_val = Node.evaluate(node.left)
        right_val = Node.evaluate(node.right)
        if node.data == '+':
            return left_val + right_val
        elif node.data == '-':
            return left_val - right_val
        elif node.data == '*':
            return left_val * right_val
        elif node.data == '/':
            return left_val / right_val

a = '2 8 9 + *'
resTree = Node.buildTree(a)
result = Node.evaluate(resTree)
print(result)

a = '2 4 + 3 5 * -'
resTree = Node.buildTree(a)
result = Node.evaluate(resTree)
print(result)

a = '10 3 2 12 + - *'
resTree = Node.buildTree(a)
result = Node.evaluate(resTree)
print(result)