# -*- coding: utf-8 -*-
"""220411100158_Modul3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AaEbxkvDp2QTvGWqvYA8Aj8notF00trT
"""

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

    def get_data(self):
        return self.data

    def get_next(self):
        return self.next

    def get_prev(self):
        return self.prev

    def set_data(self, new_data):
        self.data = new_data

    def set_next(self, new_next):
        self.next = new_next

    def set_prev(self, new_prev):
        self.prev = new_prev

    def __repr__(self):
        return str(self.data)

class LinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def is_empty(self):
        return self.head is None

    def add_tail(self, data):
        new_node = Node(data)
        if self.is_empty():
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.set_next(new_node)
            new_node.set_prev(self.tail)
            self.tail = new_node

    def add_head(self, data):
        new_node = Node(data)
        if self.is_empty():
            self.head = new_node
            self.tail = new_node
        else:
            new_node.set_next(self.head)
            self.head.set_prev(new_node)
            self.head = new_node

    def insert_after(self, data, after_node_data):
        new_node = Node(data)
        current = self.head
        while current is not None:
            if current.get_data() == after_node_data:
                if current == self.tail:
                    self.add_tail(data)
                else:
                    new_node.set_next(current.get_next())
                    new_node.set_prev(current)
                    current.get_next().set_prev(new_node)
                    current.set_next(new_node)
                return
            current = current.get_next()
        raise ValueError(f"{after_node_data} tidak ada di dalam list.")

    def delete(self, data):
        current = self.head
        while current is not None:
            if current.get_data() == data:
                if current == self.head and current == self.tail:
                    self.head = None
                    self.tail = None
                elif current == self.head:
                    self.head = current.get_next()
                    self.head.set_prev(None)
                elif current == self.tail:
                    self.tail = current.get_prev()
                    self.tail.set_next(None)
                else:
                    current.get_prev().set_next(current.get_next())
                    current.get_next().set_prev(current.get_prev())
                return
            current = current.get_next()
        raise ValueError(f"{data} tidak ada di dalam list.")

    def delete_head(self):
        if self.is_empty():
            raise ValueError("List kosong")
        if self.head == self.tail:
            self.head = None
            self.tail = None
        else:
            self.head = self.head.get_next()
            self.head.set_prev(None)

    def delete_tail(self):
        if self.is_empty():
            raise ValueError("List kosong")
        if self.head == self.tail:
            self.head = None
            self.tail = None
        else:
            self.tail = self.tail.get_prev()
            self.tail.set_next(None)

    def __repr__(self):
        nodes = []
        current = self.head
        while current is not None:
            nodes.append(str(current.get_data()))
            current = current.get_next()
        return " -> ".join(nodes)

mylist = LinkedList()

# Inisialisasi data awal

mylist.add_head(100)
mylist.add_tail(200)
mylist.add_tail(300)
mylist.add_tail(400)
mylist

# Menambahkan data di akhir

mylist.add_tail(500)
mylist

# Menambahkan data di awal

mylist.add_head(50)
mylist

# Menambahkan data 250 setelah data 200

mylist.insert_after(250, 200)
mylist

# Menghapus data di awal, data di akhir serta menghapus data target

mylist.delete_head()
mylist.delete_tail()
mylist.delete(300)
mylist